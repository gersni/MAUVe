"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class imu(object):
    __slots__ = ["roll", "pitch", "yaw", "accel_x", "accel_y", "accel_z", "gyro_x", "gyro_y", "gyro_z", "mag_x", "mag_y", "mag_z", "quat", "head", "timestamp"]

    __typenames__ = ["double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "double", "string", "double", "string"]

    __dimensions__ = [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None]

    def __init__(self):
        self.roll = 0.0
        self.pitch = 0.0
        self.yaw = 0.0
        self.accel_x = 0.0
        self.accel_y = 0.0
        self.accel_z = 0.0
        self.gyro_x = 0.0
        self.gyro_y = 0.0
        self.gyro_z = 0.0
        self.mag_x = 0.0
        self.mag_y = 0.0
        self.mag_z = 0.0
        self.quat = ""
        self.head = 0.0
        self.timestamp = ""

    def encode(self):
        buf = BytesIO()
        buf.write(imu._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dddddddddddd", self.roll, self.pitch, self.yaw, self.accel_x, self.accel_y, self.accel_z, self.gyro_x, self.gyro_y, self.gyro_z, self.mag_x, self.mag_y, self.mag_z))
        __quat_encoded = self.quat.encode('utf-8')
        buf.write(struct.pack('>I', len(__quat_encoded)+1))
        buf.write(__quat_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.head))
        __timestamp_encoded = self.timestamp.encode('utf-8')
        buf.write(struct.pack('>I', len(__timestamp_encoded)+1))
        buf.write(__timestamp_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != imu._get_packed_fingerprint():
            raise ValueError("Decode error")
        return imu._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = imu()
        self.roll, self.pitch, self.yaw, self.accel_x, self.accel_y, self.accel_z, self.gyro_x, self.gyro_y, self.gyro_z, self.mag_x, self.mag_y, self.mag_z = struct.unpack(">dddddddddddd", buf.read(96))
        __quat_len = struct.unpack('>I', buf.read(4))[0]
        self.quat = buf.read(__quat_len)[:-1].decode('utf-8', 'replace')
        self.head = struct.unpack(">d", buf.read(8))[0]
        __timestamp_len = struct.unpack('>I', buf.read(4))[0]
        self.timestamp = buf.read(__timestamp_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if imu in parents: return 0
        tmphash = (0x8fd751977b707fd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if imu._packed_fingerprint is None:
            imu._packed_fingerprint = struct.pack(">Q", imu._get_hash_recursive([]))
        return imu._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

